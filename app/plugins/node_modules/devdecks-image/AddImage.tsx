import * as React from 'react';
import { connect } from 'react-redux';

const dialog = require('electron').remote.dialog;
const fs = require('fs');

interface AddImageProps {
  pluginNumber: number;
  pluginState: any;
  slideNumber: number;
  updateCurrentPlugin: Function;
}

const options: any = {
  filters: [
    {
      name: 'Images',
      extensions: [ 'jpeg', 'jpg', 'gif', 'png' ]
    }
  ]
};

const AddImage = ({ pluginNumber, pluginState, slideNumber, updateCurrentPlugin }: AddImageProps) => {

  const selectImageFile: any = () => {
    dialog.showOpenDialog(options, (filePaths: string[]) => {
      if (!filePaths) return;
      fs.readFile(filePaths[0], (err: any, data: any) => {
        if (err) return;
        const imageBufferString: string = new Buffer(data).toString('base64');
        updateCurrentPlugin({ imageBufferString, width: 355 });
      });
    });
  };

  let componentToRender: any;
  const { width, height, imageBufferString, imageUrl } = pluginState;
  if (imageUrl && /https?:\/\/.+\.(gif|jpg|jpeg|png|svg)$/.test(imageUrl)) {
    componentToRender = (
      <img
        max="100%"
        height={ height }
        draggable={ false }
        src={ imageUrl } />
    );
  } else if (imageBufferString) {
    componentToRender = (
      <img
        max="100%"
        height={ height }
        draggable={ false }
        src={ `data:image;base64,${ pluginState.imageBufferString }` } />
    );
  } else {
    componentToRender = (
      <span
        className="pt-icon pt-icon-media"
        style={{ fontSize: 300, opacity: 0.4, margin: '-25px 0' }}
        onDoubleClick={ () => selectImageFile() } />
    );
  }

  return (
    <div>{ componentToRender }</div>
  );
}

export default AddImage;
