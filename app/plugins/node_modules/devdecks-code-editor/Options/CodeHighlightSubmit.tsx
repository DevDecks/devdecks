import * as React from 'react';

import {
  Alert,
  Button,
  Intent,
  Tag,
} from '@blueprintjs/core';

const cloneDeep = require('lodash.clonedeep');

const { SortableContainer, SortableElement, arrayMove } = require('react-sortable-hoc');

const SortableItem = SortableElement((props: any) => {
  const { highlightedItems, position, value, updateCurrentPlugin } = props;
  return (
    <li>
      <Tag
        onRemove={() => {
          const _highlightedItems = cloneDeep(highlightedItems);
          _highlightedItems.splice(position, 1);
          updateCurrentPlugin({ highlightedItems: _highlightedItems });
        }}>
        {value}
      </Tag>
    </li>
  );
});

const SortableList = SortableContainer((props: any) => {
  const { highlightedItems, updateCurrentPlugin } = props;
  return (
    <ul style={{ width: 100 }}>
      {
        props.items.map((value: any, index: number) =>
          <SortableItem
            key={`item-${index}`}
            highlightedItems={highlightedItems}
            index={index}
            position={index}
            value={value}
            updateCurrentPlugin={updateCurrentPlugin} />
        )
      }
    </ul>
  );
});

interface CodeHighlightSubmitProps {
  pluginState: any;
  updateCurrentPlugin: Function;
}

interface CodeHighlightSubmitStates {
  alertMessage?: string;
  isAlert?: boolean;
  start?: string;
  end?: string;
  text?: string;
}

class CodeHighlightSubmit extends React.Component<CodeHighlightSubmitProps, CodeHighlightSubmitStates> {
  maxLines: number = 0;
  
  constructor() {
    super();
    this.handleSort = this.handleSort.bind(this);
    this.validateHighlightBlock = this.validateHighlightBlock.bind(this);
    this.state = {
      alertMessage: '',
      isAlert: false,
      start: '',
      end: '',
      text: '',
    };
  }

  private handleSort({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }) {
    const { pluginState: { highlightedItems }, updateCurrentPlugin } = this.props;
    updateCurrentPlugin({ highlightedItems: arrayMove(highlightedItems, oldIndex, newIndex) });
  }

  private validateHighlightBlock() {
    const { pluginState: { highlightedItems, snippet } } = this.props;
    const { start, end, text } = this.state;

    const max = snippet.split('\n').length - 1;
    if (!start || +start < 0 || +start > max) {
      return {
        success: false,
        message: 'Start value cannot be less than 0 or greater than number of lines',
      };
    }
    if (!end || +end < +start || +end > max) {
      return {
        success: false,
        message: 'End value cannot be less than start value or greater than number of lines',
      };
    }
    return {
      success: true,
    };
  }

  public componentWillReceiveProps(nextProps: CodeHighlightSubmitProps) {
    const { snippet } = nextProps.pluginState;
    this.maxLines = snippet.split('\n').length - 1;
  }

  public render() {
    const { pluginState: { highlightedItems, snippet }, updateCurrentPlugin } = this.props;
    const disabled = snippet ? false : true;
    const items = highlightedItems.map((highlightedItem: any) => `${highlightedItem.start}-${highlightedItem.end}`);

    return (
      <div id="code-editor-highlight-code-container">
        <Alert
          confirmButtonText="OK"
          intent={Intent.DANGER}
          isOpen={this.state.isAlert}
          onConfirm={() => this.setState({ isAlert: false })}>
          {this.state.alertMessage}
        </Alert>

        <div style={{ display: 'flex', alignItems: 'center' }}>
          <input
            className="pt-input"
            type="number"
            disabled={disabled}
            min={0}
            max={this.state.end}
            placeholder="Start"
            value={this.state.start}
            onChange={(e: any) => this.setState({ start: e.target.value })}/>
            <span style={{ margin: '0 5px' }}>-</span>
          <input
            className="pt-input"
            type="number"
            disabled={disabled}
            min={this.state.start}
            max={this.maxLines}
            placeholder="End"
            value={this.state.end}
            onChange={(e: any) => this.setState({ end: e.target.value })} />
        </div>
        <textarea
          style={{ height: 110, margin: '5px 0' }}
          disabled={disabled}
          className="pt-input pt-fill"
          dir="auto"
          value={this.state.text}
          onChange={(e: any) => this.setState({ text: e.target.value })}/>
        <Button
          disabled={disabled}
          text="Highlight Codeblock"
          intent={Intent.PRIMARY}
          onClick={(): void => {
            const { start, end, text } = this.state;

            const validateBlockResult: {
              success: boolean;
              message?: string;
            } = this.validateHighlightBlock();

            if (!validateBlockResult.success) {
              this.setState({ isAlert: true, alertMessage: validateBlockResult.message });
              return null;
            }

            const _highlightedItems = cloneDeep(highlightedItems);
            _highlightedItems.push({ start, end, text });
            updateCurrentPlugin({ highlightedItems: _highlightedItems });
            this.setState({ start: '', end: '', text: '' });
          }} />

        <SortableList
          highlightedItems={highlightedItems}
          helperClass="code-editor-draggable-items"
          items={items}
          onSortEnd={this.handleSort}
          shouldCancelStart={(e: any) => {
            if (e.target.className === 'pt-tag-remove') return true;
          }}
          updateCurrentPlugin={updateCurrentPlugin} />
      </div>
    );
  }
}

export default CodeHighlightSubmit;
