import * as React from 'react';
import { Button, Dialog, Intent } from '@blueprintjs/core';

const brace = require('brace');
const AceEditor = require('react-ace').default;

//languages
require('brace/mode/c_cpp');
require('brace/mode/clojure');
require('brace/mode/css');
require('brace/mode/django');
require('brace/mode/golang');
require('brace/mode/haskell');
require('brace/mode/html');
require('brace/mode/java');
require('brace/mode/javascript');
require('brace/mode/json');
require('brace/mode/less');
require('brace/mode/objectivec');
require('brace/mode/perl');
require('brace/mode/php');
require('brace/mode/python');
require('brace/mode/ruby');
require('brace/mode/scala');
require('brace/mode/scss');
require('brace/mode/sql');
require('brace/mode/swift');
require('brace/mode/typescript');

//themes
require('brace/theme/xcode');

interface CodeEditProps {
  pluginState: any;
  updateCurrentPlugin: Function;
}

interface CodeEditStates {
  value: string;
}

class CodeEdit extends React.Component<CodeEditProps, CodeEditStates> {
  constructor() {
    super();
    this.state = {
      value: '',
    };
  }

  componentWillReceiveProps() {
    const { pluginState: { snippet } } = this.props;
    if (this.state.value !== snippet) {
      this.setState({ value: snippet });
    }
  }

  render() {
    const { pluginState, updateCurrentPlugin } = this.props;
    const { value } = this.state;
    const { fontSize, isOpen, snippet, snippetEval, theme } = pluginState;

    let { language } = pluginState;
    switch (language) {
      case 'CPP': {
        language = 'c_cpp';
        break;
      }
      case 'Go': {
        language = 'golang';
        break;
      }
      case 'HTMLBars': {
        language = 'html';
        break;
      }
    }

    return (
      <li>
        <Button
          text="Edit Code"
          intent={Intent.PRIMARY}
          onClick={() => updateCurrentPlugin({ isOpen: true })} />

        <Dialog
          className="code-editor-code-edit"
          isCloseButtonShown={false}
          isOpen={isOpen}
          title={language}
          onClose={() => updateCurrentPlugin({ isOpen: false })} >
          <div className="pt-dialog-body">
            <AceEditor
              mode={language.toLowerCase()}
              theme='xcode'
              width='100%'
              height='300px'
              focus={true}
              fontSize="16px"
              showGutter={false}
              showPrintMargin={false}
              tabSize={2}
              value={this.state.value}
              onChange={(snippet: string) => this.setState({ value: snippet })} />
          </div>
          <div className="pt-dialog-footer">
            <div className="pt-dialog-footer-actions">
              <Button
                text="OK"
                intent={Intent.PRIMARY}
                onClick={() => updateCurrentPlugin({
                  isOpen: false,
                  snippet: this.state.value
                })} />
            </div>
          </div>
        </Dialog>
      </li>
    );
  }
}

export default CodeEdit;
