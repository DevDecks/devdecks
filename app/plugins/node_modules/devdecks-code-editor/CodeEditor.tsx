import * as React from 'react';
import CodeRun from './Options/CodeRun';
import './code-editor.scss';

import {
  Popover,
  Position,
} from '@blueprintjs/core';

const classNames = require('classnames');
const Highlight = require('react-highlight');
require('highlight.js/styles/xcode.css');

interface CodeEditorProps {
  isFullscreen?: boolean;
  pluginState: any;
  updateCurrentPlugin?: any;
}

class CodeEditor extends React.Component<CodeEditorProps, { activeItem: number }> {
  codeBlocks: any[] = [];

  constructor() {
    super();
    this.handleCodeHighlight = this.handleCodeHighlight.bind(this);
    this.state = {
      activeItem: 0,
    };
  }

  private handleCodeHighlight(e: any) {
    const { pluginState: { highlightedItems } } = this.props;
    const { activeItem } = this.state;
    switch (e.keyCode) {
      // UP
      case 38: {
        if (activeItem > 0) this.setState({ activeItem: activeItem - 1 });
        break;
      }

      // DOWN
      case 40: {
        if (activeItem < highlightedItems.length - 1) this.setState({ activeItem: activeItem + 1 });
        break;
      }
    }
  };

  public componentDidUpdate() {
    const { codeBlocks } = this;
    const { pluginState: { highlightedItems } } = this.props;
    const { activeItem } = this.state;
    const activeBlock = highlightedItems[activeItem];
    if (activeBlock) {
      const scrollToCodeBlock = codeBlocks[activeBlock.start]
      scrollToCodeBlock ? scrollToCodeBlock.scrollIntoViewIfNeeded(true) : null;
    }
  }

  public render() {
    const { 
      isFullscreen,
      pluginState,
      updateCurrentPlugin,
    } = this.props;

    const { activeItem } = this.state;

    const {
      fontSize,
      height,
      highlightedItems,
      isOpen,
      language,
      showLineNumbers,
      snippet,
      theme
    } = pluginState;

    const codeLineNumberClass = classNames({
      'code-line-number': true,
      'show': !isFullscreen || showLineNumbers,
    });

    const activeBlock = highlightedItems[activeItem];
    const code = (
      snippet.split('\n').map((line: string, i: number) => {
        if (!activeBlock){
          return (
            <div
              key={i}
              className="code"
              id={`code-highlight-${i}`} >
              <span className={codeLineNumberClass}>{i}</span>
              <Highlight className={`${language.toLowerCase()} highlighted`}>
                {line}
              </Highlight>
            </div>
          );
        } else if (i >= activeBlock.start && i <= activeBlock.end) {
            if (i == activeBlock.end) {
              return (
                <Popover
                  key={i}
                  popoverClassName={ !activeBlock.text ? "hide-popover" : null }
                  inline={true}
                  content={activeBlock.text}
                  defaultIsOpen={true}
                  position={Position.BOTTOM}>
                  <div
                    ref={(c: any) => this.codeBlocks[i] = c}
                    className="code"
                    id={`code-highlight-${i}`} >
                    <span className={codeLineNumberClass}>{i}</span>
                    <Highlight className={`${language.toLowerCase()} highlighted`}>
                      {line}
                    </Highlight>
                  </div>
                </Popover>
              );
            }

            return (
              <div
                ref={(c: any) => this.codeBlocks[i] = c}
                key={i}
                className="code"
                id={`code-highlight-${i}`} >
                <span className={codeLineNumberClass}>{i}</span>
                <Highlight className={`${language.toLowerCase()} highlighted`}>
                  {line}
                </Highlight>
              </div>
            );
        }
        return (
          <div
            key={i}
            className="code"
            id={`code-highlight-${i}`} >
            <span className={codeLineNumberClass}>{i}</span>
            <Highlight className={`${language.toLowerCase()} non-highlighted`}>
              {line}
            </Highlight>
          </div>
        );
      })
    );

    return (
      <div
        id="codeeditor-container"
        tabIndex={-1}
        style={{ height }}
        onDoubleClick={ updateCurrentPlugin ? updateCurrentPlugin.bind(this, { isOpen: true }) : () => {} }
        onKeyDown={this.handleCodeHighlight} >
        {
          snippet
            ? <div style={{ width: '100%' }}>
                {code}
                {
                  isFullscreen
                    ? <CodeRun
                        pluginState={pluginState}
                        styles={{ position: 'absolute', bottom: 0, right: 25 }}/>
                    : null
                }
              </div>
            : <span
                className="pt-icon-standard pt-icon-code"
                style={{ width: '100%', fontSize: '45em', textAlign: 'center', opacity: 0.7 }} >
              </span>
        }
      </div>
    ); 
  }
}

export default CodeEditor;
