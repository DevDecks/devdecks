import * as React from 'react';
import { Button, Intent } from "@blueprintjs/core";

interface FontStylesProps {
  pluginState: any;
  updateCurrentPlugin: any;
}

const FontStyles = ({ pluginState, updateCurrentPlugin }: FontStylesProps) => {
  const {
    isBold,
    isItalic,
    isOrderedList,
    isUnorderedList,
    isUnderline,
    textAlignment,
  } = pluginState;

  return (
    <div>
      <Button
        iconName="bold"
        intent={ document.queryCommandState('bold') && isBold ? Intent.SUCCESS : Intent.NONE }
        onClick={() => {
          document.execCommand('bold');
          updateCurrentPlugin({ isBold: document.queryCommandState('bold') || isBold })
        }} />
      <Button
        iconName="italic"
        intent={ document.queryCommandState('italic') && isItalic ? Intent.SUCCESS : Intent.NONE }
        onClick={() => {
          document.execCommand('italic');
          updateCurrentPlugin({ isItalic: document.queryCommandState('italic') || isItalic })
        }} />
      <Button
        iconName="underline"
        intent={ document.queryCommandState('underline') && isUnderline ? Intent.SUCCESS : Intent.NONE }
        onClick={() => {
          document.execCommand('underline');
          updateCurrentPlugin({ isUnderline: document.queryCommandState('underline') || isUnderline })
        }} />
      <span style={{ marginRight: 5 }} />
      <Button
        iconName="align-left"
        intent={ textAlignment === 'left' ? Intent.SUCCESS : Intent.NONE }
        onClick={(): void => {
          if (isOrderedList || isUnorderedList) return updateCurrentPlugin({ textAlignment: null });
          textAlignment === 'left'
            ? updateCurrentPlugin({ textAlignment: null })
            : updateCurrentPlugin({ textAlignment: 'left' })}
        } />
      <Button
        iconName="align-center"
        intent={ textAlignment === 'center' ? Intent.SUCCESS : Intent.NONE }
        onClick={(): void => {
          if (isOrderedList || isUnorderedList) return updateCurrentPlugin({ textAlignment: null });
          textAlignment === 'center'
            ? updateCurrentPlugin({ textAlignment: null })
            : updateCurrentPlugin({ textAlignment: 'center' })}
        } />
      <Button
        iconName="align-right"
        intent={ textAlignment === 'right' ? Intent.SUCCESS : Intent.NONE }
        onClick={(): void => {
          if (isOrderedList || isUnorderedList) return updateCurrentPlugin({ textAlignment: null });
          textAlignment === 'right'
            ? updateCurrentPlugin({ textAlignment: null })
            : updateCurrentPlugin({ textAlignment: 'right' })}
        } />
    </div>
  );
};

export default FontStyles;
